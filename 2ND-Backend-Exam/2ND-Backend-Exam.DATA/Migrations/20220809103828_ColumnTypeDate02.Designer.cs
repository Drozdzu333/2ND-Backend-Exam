// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2ND_Backend_Exam.DATA.Context;

#nullable disable

namespace _2ND_Backend_Exam.DATA.Migrations
{
    [DbContext(typeof(EduContext))]
    [Migration("20220809103828_ColumnTypeDate02")]
    partial class ColumnTypeDate02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Very old one Author",
                            Name = "Author01"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Very young one Author",
                            Name = "Author02"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Middle one Author",
                            Name = "Author03"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Some no name working for Mexico government",
                            Name = "Corpo"
                        });
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.EduMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("EduMaterials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "Step By Step How To Step",
                            Location = "yt.com/aaaaaa",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(2022, 8, 9, 12, 38, 28, 468, DateTimeKind.Local).AddTicks(9469),
                            Title = "Step By Step How To Step"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Description = "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
                            Location = "yt.com/bbbbbb",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "bbbbbbbbbbbbbbbbbb"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Description = "ccccccccccccccccccccccccccccccccccccccccccccccc",
                            Location = "yt.com/ccccccccccccccccccccccccccccccccccccc",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(2020, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ccccccccccccccccccccccccc"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            Description = "some some soem",
                            Location = "onet.pl/some",
                            MaterialTypeId = 2,
                            PublicationDate = new DateTime(2022, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "some"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            Description = "Book Book Book Book Book Book Book ",
                            Location = "ISBN:00000000-0000-0000-0000-000000000000",
                            MaterialTypeId = 3,
                            PublicationDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Book "
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Description = "Other Book Other Book Other Book Other Book Other Book Other Book Other Book Other Book Other Book Other Book ",
                            Location = "Other Book in library",
                            MaterialTypeId = 3,
                            PublicationDate = new DateTime(2022, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Other Book "
                        });
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "YouTube"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Article"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Book"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Boot camp"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Meet up"
                        });
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EduMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("NameOfAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EduMaterialId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Very good",
                            EduMaterialId = 1,
                            NameOfAuthor = "Bartek",
                            Rate = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "Very bad",
                            EduMaterialId = 1,
                            NameOfAuthor = "Slawek",
                            Rate = 7
                        },
                        new
                        {
                            Id = 3,
                            Description = "IDK",
                            EduMaterialId = 1,
                            NameOfAuthor = "Bartlomiej",
                            Rate = 8
                        },
                        new
                        {
                            Id = 4,
                            Description = "Czadowo",
                            EduMaterialId = 1,
                            NameOfAuthor = "Smok wawelski",
                            Rate = 10
                        },
                        new
                        {
                            Id = 5,
                            Description = "To byl on",
                            EduMaterialId = 2,
                            NameOfAuthor = "Kon na bialym rycerzu",
                            Rate = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Jako tako",
                            EduMaterialId = 2,
                            NameOfAuthor = "Jaki typ",
                            Rate = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Very good",
                            EduMaterialId = 2,
                            NameOfAuthor = "Bartek",
                            Rate = 3
                        });
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.EduMaterial", b =>
                {
                    b.HasOne("_2ND_Backend_Exam.DATA.Entities.Author", "Author")
                        .WithMany("Materials")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_2ND_Backend_Exam.DATA.Entities.MaterialType", "MaterialType")
                        .WithMany("EduMaterials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.Review", b =>
                {
                    b.HasOne("_2ND_Backend_Exam.DATA.Entities.EduMaterial", "EduMaterial")
                        .WithMany("Reviews")
                        .HasForeignKey("EduMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EduMaterial");
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.Author", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.EduMaterial", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("_2ND_Backend_Exam.DATA.Entities.MaterialType", b =>
                {
                    b.Navigation("EduMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
